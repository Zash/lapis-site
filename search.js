// Generated by CoffeeScript 1.12.7
(function() {
  var DocumentationSearch, DocumentationSearchResults, RDF, SUGGESTION_URL, a, button, code, div, em, form, h1, h2, h3, h4, h5, h6, img, input, label, li, ol, p, span, strong, textarea, ul, useEffect, useRef, useState;

  this.R = {};

  this.L || (this.L = {});

  SUGGESTION_URL = "https://github.com/leafo/lapis-site/issues/new?body=Please%20tell%20us%20what%20you%20were%20trying%20to%20find.%20What%20you%20typed%20and%20what%20you%20expected%20to%20see.%20This%20can%20either%20be%20for%20existing%20pages%2C%20or%20pages%2Fquestions%20you%20think%20should%20be%20answered%20in%20the%20documentation%0A&title=Search%20suggestion%3A%20<<what%20were%20you%20trying%20to%20find%3F>>";

  L.setup_search = function(el, opts) {
    var index, pages_by_id, render;
    if (opts == null) {
      opts = {};
    }
    render = function(props) {
      if (props == null) {
        props = {};
      }
      return ReactDOM.render(React.createElement(R.DocumentationSearch, props), el[0]);
    };
    pages_by_id = {};
    index = null;
    render({
      root: opts.root
    });
    return $.get(opts.index).done((function(_this) {
      return function(res) {
        var j, len1, page, ref;
        index = lunr(function() {
          this.field("title");
          return this.ref("id");
        });
        ref = res.pages;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          page = ref[j];
          pages_by_id[page.id] = page;
          index.add(page);
        }
        return render({
          root: opts.root,
          search: function(query) {
            var k, len2, results, results1;
            results = index.search(query);
            results1 = [];
            for (k = 0, len2 = results.length; k < len2; k++) {
              res = results[k];
              page = pages_by_id[res.ref];
              results1.push({
                score: res.score,
                page: page
              });
            }
            return results1;
          }
        });
      };
    })(this));
  };

  RDF = ReactDOMFactories;

  div = RDF.div, span = RDF.span, a = RDF.a, p = RDF.p, ol = RDF.ol, ul = RDF.ul, li = RDF.li, strong = RDF.strong, em = RDF.em, img = RDF.img, form = RDF.form, label = RDF.label, input = RDF.input, textarea = RDF.textarea, button = RDF.button, h1 = RDF.h1, h2 = RDF.h2, h3 = RDF.h3, h4 = RDF.h4, h5 = RDF.h5, h6 = RDF.h6, code = RDF.code;

  useState = React.useState, useEffect = React.useEffect, useRef = React.useRef;

  R.DocumentationSearchResults = React.memo(DocumentationSearchResults = function(props) {
    var results;
    results = props.results.map(function(result, i) {
      var classes, is_code, link, title;
      title = result.page.title;
      is_code = title.match(/^[^A-Z]*$/) || title.match(/_/);
      if (is_code) {
        title = title.replace(/[^=]+=\s+/, "");
      }
      classes = "result_row";
      if (props.selected_result === i) {
        classes += " selected";
      }
      link = a({
        href: props.root + "/" + result.page.url
      }, title);
      return div({
        className: classes,
        key: "result-" + i
      }, is_code ? code({}, link) : link, result.page.subtitle ? React.createElement(React.Fragment, {}, " ", span({
        className: "result_sub"
      }, result.page.subtitle)) : void 0);
    });
    if (!results.length) {
      results = div({
        className: "result_row empty"
      }, "Nothing found", " â€” ", span({
        className: "help_search"
      }, a({
        href: SUGGESTION_URL,
        target: "_blank"
      }, "Help improve search/documentation...")));
    }
    return div({
      className: "results_popup"
    }, results);
  });

  R.DocumentationSearch = DocumentationSearch = function(props) {
    var container_ref, do_search, has_focus, ref, ref1, ref2, ref3, results, search_query, selected_result, set_has_focus, set_results, set_search_query, set_selected_result;
    container_ref = useRef(null);
    ref = useState(""), search_query = ref[0], set_search_query = ref[1];
    ref1 = useState(null), results = ref1[0], set_results = ref1[1];
    ref2 = useState(0), selected_result = ref2[0], set_selected_result = ref2[1];
    ref3 = useState(false), has_focus = ref3[0], set_has_focus = ref3[1];
    do_search = (function(_this) {
      return function(query) {
        if (!props.search) {
          return;
        }
        set_selected_result(0);
        return set_results(props.search(query));
      };
    })(this);
    useEffect((function(_this) {
      return function() {
        var click_body;
        click_body = function(e) {
          if (!has_focus) {
            return;
          }
          if (!$(e.target).closest(container_ref.current).length) {
            return set_has_focus(false);
          }
        };
        $(document.body).on("click", click_body);
        return function() {
          return $(document.body).off("click", click_body);
        };
      };
    })(this));
    useEffect((function(_this) {
      return function() {
        if (props.search && search_query) {
          return do_search(search_query);
        }
      };
    })(this), [props.search]);
    return div({
      className: "searcher",
      ref: container_ref
    }, input({
      type: "text",
      className: "search_input",
      value: search_query,
      placeholder: "Search documentation...",
      onFocus: (function(_this) {
        return function() {
          return set_has_focus(true);
        };
      })(this),
      onChange: (function(_this) {
        return function(e) {
          set_search_query(e.target.value);
          return do_search(e.target.value);
        };
      })(this),
      onKeyDown: (function(_this) {
        return function(e) {
          var len, result;
          switch (e.keyCode) {
            case 38:
              if (!results) {
                return;
              }
              e.preventDefault();
              len = results.length;
              set_selected_result((selected_result + len - 1) % len);
              break;
            case 40:
              if (!results) {
                return;
              }
              e.preventDefault();
              len = results.length;
              set_selected_result((selected_result + 1) % len);
              break;
            case 13:
              e.preventDefault();
              result = results && results[selected_result];
              if (result) {
                window.location = props.root + "/" + result.page.url;
              }
              break;
            case 27:
              e.preventDefault();
              set_search_query("");
              set_results(null);
          }
        };
      })(this)
    }), search_query && has_focus && results ? React.createElement(R.DocumentationSearchResults, {
      results: results,
      selected_result: selected_result,
      root: props.root
    }) : void 0);
  };

}).call(this);
